// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Medveddo/rocket-science/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// PayOrder provides a mock function with given fields: ctx, request, userUUID
func (_m *Client) PayOrder(ctx context.Context, request model.PayOrderRequest, userUUID string) (model.PayOrderResponse, error) {
	ret := _m.Called(ctx, request, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 model.PayOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PayOrderRequest, string) (model.PayOrderResponse, error)); ok {
		return rf(ctx, request, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PayOrderRequest, string) model.PayOrderResponse); ok {
		r0 = rf(ctx, request, userUUID)
	} else {
		r0 = ret.Get(0).(model.PayOrderResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PayOrderRequest, string) error); ok {
		r1 = rf(ctx, request, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type Client_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - request model.PayOrderRequest
//   - userUUID string
func (_e *Client_Expecter) PayOrder(ctx interface{}, request interface{}, userUUID interface{}) *Client_PayOrder_Call {
	return &Client_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, request, userUUID)}
}

func (_c *Client_PayOrder_Call) Run(run func(ctx context.Context, request model.PayOrderRequest, userUUID string)) *Client_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PayOrderRequest), args[2].(string))
	})
	return _c
}

func (_c *Client_PayOrder_Call) Return(_a0 model.PayOrderResponse, _a1 error) *Client_PayOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_PayOrder_Call) RunAndReturn(run func(context.Context, model.PayOrderRequest, string) (model.PayOrderResponse, error)) *Client_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
